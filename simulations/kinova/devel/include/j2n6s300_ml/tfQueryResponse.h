// Generated by gencpp from file j2n6s300_ml/tfQueryResponse.msg
// DO NOT EDIT!


#ifndef J2N6S300_ML_MESSAGE_TFQUERYRESPONSE_H
#define J2N6S300_ML_MESSAGE_TFQUERYRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PoseArray.h>

namespace j2n6s300_ml
{
template <class ContainerAllocator>
struct tfQueryResponse_
{
  typedef tfQueryResponse_<ContainerAllocator> Type;

  tfQueryResponse_()
    : success(false)
    , joint_coordinates()  {
    }
  tfQueryResponse_(const ContainerAllocator& _alloc)
    : success(false)
    , joint_coordinates(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _success_type;
  _success_type success;

   typedef  ::geometry_msgs::PoseArray_<ContainerAllocator>  _joint_coordinates_type;
  _joint_coordinates_type joint_coordinates;





  typedef boost::shared_ptr< ::j2n6s300_ml::tfQueryResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::j2n6s300_ml::tfQueryResponse_<ContainerAllocator> const> ConstPtr;

}; // struct tfQueryResponse_

typedef ::j2n6s300_ml::tfQueryResponse_<std::allocator<void> > tfQueryResponse;

typedef boost::shared_ptr< ::j2n6s300_ml::tfQueryResponse > tfQueryResponsePtr;
typedef boost::shared_ptr< ::j2n6s300_ml::tfQueryResponse const> tfQueryResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::j2n6s300_ml::tfQueryResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::j2n6s300_ml::tfQueryResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace j2n6s300_ml

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'j2n6s300_ml': ['/home/simon/sim2real/simulations/kinova/src/sim2Real_j2n6s300/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::j2n6s300_ml::tfQueryResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2n6s300_ml::tfQueryResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::j2n6s300_ml::tfQueryResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::j2n6s300_ml::tfQueryResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2n6s300_ml::tfQueryResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2n6s300_ml::tfQueryResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::j2n6s300_ml::tfQueryResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "00bf7357a79d1c228b9ae3c8a88c8af2";
  }

  static const char* value(const ::j2n6s300_ml::tfQueryResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x00bf7357a79d1c22ULL;
  static const uint64_t static_value2 = 0x8b9ae3c8a88c8af2ULL;
};

template<class ContainerAllocator>
struct DataType< ::j2n6s300_ml::tfQueryResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "j2n6s300_ml/tfQueryResponse";
  }

  static const char* value(const ::j2n6s300_ml::tfQueryResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::j2n6s300_ml::tfQueryResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool success\n"
"geometry_msgs/PoseArray joint_coordinates\n"
"\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseArray\n"
"# An array of poses with a header for global reference.\n"
"\n"
"Header header\n"
"\n"
"Pose[] poses\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::j2n6s300_ml::tfQueryResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::j2n6s300_ml::tfQueryResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.success);
      stream.next(m.joint_coordinates);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct tfQueryResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::j2n6s300_ml::tfQueryResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::j2n6s300_ml::tfQueryResponse_<ContainerAllocator>& v)
  {
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
    s << indent << "joint_coordinates: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseArray_<ContainerAllocator> >::stream(s, indent + "  ", v.joint_coordinates);
  }
};

} // namespace message_operations
} // namespace ros

#endif // J2N6S300_ML_MESSAGE_TFQUERYRESPONSE_H
